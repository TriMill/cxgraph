use crate::language::ast::*;
use crate::language::token::*;

grammar<'input>(input: &'input str);

extern {
	type Location = usize;
	type Error = LexerError;

	enum Token<'input> {
		"(" => Token::LParen,
		")" => Token::RParen,
		"{" => Token::LBrace,
		"}" => Token::RBrace,
		"+" => Token::Plus,
		"-" => Token::Minus,
		"*" => Token::Star,
		"/" => Token::Slash,
		"^" => Token::Caret,
		"," => Token::Comma,
		"->" => Token::Arrow,
		"=" => Token::Equal,
		":" => Token::Colon,
		">" => Token::Greater,
		"<" => Token::Less,
		">=" => Token::GreaterEqual,
		"<=" => Token::LessEqual,
		"==" => Token::EqualEqual,
		"!=" => Token::BangEqual,
		"\n" => Token::Newline,
		"sum" => Token::Sum,
		"prod" => Token::Prod,
		"iter" => Token::Iter,
		"if" => Token::If,
		Number => Token::Number(<f64>),
		Name => Token::Name(<&'input str>),
	}
}

// Definitions

pub Program: Vec<Definition<'input>> = Definitions;

Definitions: Vec<Definition<'input>> = {
	"\n"* <defs:(<Definition> "\n"+)*> <last:Definition?> => defs.into_iter().chain(last).collect(),
}

Definition: Definition<'input> = {
	<n:Name> "(" <args:(<Name> ",")*> <last:Name?> ")" "=" <exs:Exprs> => Definition::Function {
		name: n,
		args: args.into_iter().chain(last).collect(),
		value: exs,
	},
	<n:Name> "=" <exs:Exprs> => Definition::Constant {
		name: n,
		value: exs,
	},
}

// Expressions

Exprs: Vec<Expression<'input>> = {
	<args:(<Expr> ",")*> <last:Expr> ","? => args.into_iter().chain(std::iter::once(last)).collect(),
}

Expr: Expression<'input> = Store;

Store: Expression<'input> = {
	<a:Equality> "->" <n:Name> => Expression::new_store(a, n),
	Equality,
}

Equality: Expression<'input> = {
	<a:Compare> "==" <b:Compare> => Expression::new_binary(BinaryOp::Eq, a, b),
	<a:Compare> "!=" <b:Compare> => Expression::new_binary(BinaryOp::Ne, a, b),
	Compare,
}

Compare: Expression<'input> = {
	<a:Sum> ">"  <b:Sum> => Expression::new_binary(BinaryOp::Gt, a, b),
	<a:Sum> "<"  <b:Sum> => Expression::new_binary(BinaryOp::Lt, a, b),
	<a:Sum> ">=" <b:Sum> => Expression::new_binary(BinaryOp::Ge, a, b),
	<a:Sum> "<=" <b:Sum> => Expression::new_binary(BinaryOp::Le, a, b),
	Sum,
}

Sum: Expression<'input> = {
	<a:Sum> "+" <b:Product> => Expression::new_binary(BinaryOp::Add, a, b),
	<a:Sum> "-" <b:Product> => Expression::new_binary(BinaryOp::Sub, a, b),
	Product,
}

Product: Expression<'input> = {
	<a:Product> "*" <b:Unary> => Expression::new_binary(BinaryOp::Mul, a, b),
	<a:Product> "/" <b:Unary> => Expression::new_binary(BinaryOp::Div, a, b),
	Unary,
}

Unary: Expression<'input> = {
	"+" <a:Unary> => Expression::new_unary(UnaryOp::Pos, a),
	"-" <a:Unary> => Expression::new_unary(UnaryOp::Neg, a),
	"*" <a:Unary> => Expression::new_unary(UnaryOp::Conj, a),
	<a:Juxtapose> <b:Power> => Expression::new_binary(BinaryOp::Mul, a, b),
	Power,
}

Juxtapose: Expression<'input> = {
	<a:Juxtapose> <b:PreJuxtapose> => Expression::new_binary(BinaryOp::Mul, a, b),
	PreJuxtapose,
}

Power: Expression<'input> = {
	<a:FnCall> "^" <b:Unary> => Expression::new_binary(BinaryOp::Pow, a, b),
	FnCall,
}

FnCall: Expression<'input> = {
	<n:Name> "(" <args:Exprs> ")"
		=> Expression::new_fncall(n, args),
	<Item>
}

PreJuxtapose: Expression<'input> = {
	<n:Number> => Expression::new_number(n),
	"(" <Expr> ")",
}

Block: Expression<'input> = {
	"{" <exs:Exprs> "}" => Expression::new_block(exs),
}

Item: Expression<'input> = {
	<n:Number> => Expression::new_number(n),
	<n:Name> => Expression::new_name(n),
	"(" <Expr> ")",
	Block,
	"sum" "(" <name:Name> ":" <min:Expr> "," <max:Expr> ")" <body:Block>
		=> Expression::new_sum(name, min, max, body),
	"prod" "(" <name:Name> ":" <min:Expr> "," <max:Expr> ")" <body:Block>
		=> Expression::new_prod(name, min, max, body),
	"iter" "(" <count:Expr> "," <init:Equality> "->" <name:Name> ")" <body:Block>
		=> Expression::new_iter(name, count, init, body),
	"if" "(" <cond:Expr> ")" <t:Block> <f:Block>
		=> Expression::new_if(cond, t, f),
}
